console.log("v0.3a");

import express from 'express'
import {TTMGNetwork} from './TTMGNetwork.js'  //import class TTMGNetwork

let tmg = new TTMGNetwork('hello');
const app = express();
const PORT = 3000;
let data;

app.use(express.json());                          // Middleware to parse JSON bodies
app.use(express.urlencoded({ extended: true }));  // Middleware to parse URL-encoded bodies

//Serve static files from the "www" directory
//--Any URL request to server, that is not explicitly defined with app.post etc. below,
//  will be matched to a file name in the www directory.
app.use(express.static('www'));  // Our index.html will be in a 'www' folder in the same directory as main.js

function close(message) {
  console.log("here in close() function.  Message=",message);
  tmg.close();
}

// Handle form submission
app.post('/submit', (req, res) => {
  const { firstName, lastName } = req.body;
  //www.fpg.com/myforms/?key=asbas1234qw345paia&day=today
  const key = req.query.key  //this would make key = 'asbas1234qw345paia'
  console.log(firstName, lastName);
  let data = tmg.setData('^v4wTest', 0, 2, 0, 'name='+lastName+', '+firstName); // set ^v4wTest(0,2,0)="..."
  res.send("posted to ydb");
});

/*
app.get("/test", (req,res) => {
  console.log("GET /test");
  res.send("ok");
});

app.post("/test", (req, res) => {
  console.log("POST /test");

  // Access the JSON data sent in the request body
  const data = req.body;

  let result = tmg.getData({global: 'v4wTest', subscripts: [0, 2, 0]}); // write ^v4wTest(0,2,0)
  //{
  //  ok: true,
  //  global: 'v4wTest',
  //  subscripts: [ 0, 2, 0 ],
  //  data: '2 bags of wheat',
  //  defined: true
  //}
  console.log("test1:",data);

  //res.send(`OK ${JSON.stringify(data)}`);
  res.json(result);
});
*/

// Browser RPC endpoint for login !!!
app.post('/api/login', async (req, res) => {
    console.log("Received login request from browser:", req.body);
    const { lastName, dob } = req.body;

    if (!lastName || !dob) {
        return res.status(400).json({ success: false, message: 'Last name and DOB are required.' });
    }

    try {
        // Call your TTMGNetwork RPC function
        // We'll define a Mumps RPC like 'LOGIN^AUTHROUTINE'
        // that takes lastName and dob as arguments and returns success/failure.
        let err="";
        const rpcResult = await tmg.RPC("LOGIN", "AUTHROUTINE", [lastName, dob, err]);

        console.log('RPC result from Mumps for login:', JSON.stringify(rpcResult));

        // The Mumps RPC should return a structure like:
        // { args: ['LastName', 'DOB'], return: '1' } for success or '0' for failure
        // or potentially a more complex object like { success: 1, userId: 123 }
        // For simplicity, let's assume Mumps returns '1' for success, '0' for failure in its scalar return.
        
        const mumpsReturnScalar = rpcResult.return; // This is the scalar value returned by LOGIN^AUTHROUTINE

        if (mumpsReturnScalar === "1") { // Check if Mumps RPC indicates success
            res.json({ success: true, message: 'Authentication successful.' });
        } else {
            // Mumps returned failure or specific error message
            // You might want to pass more detailed error from Mumps if available
            res.status(401).json({ success: false, message: `Authentication failed: ${mumpsReturnScalar || 'Invalid credentials'}` });
        }

    } catch (error) {
        console.error('Error during /api/login RPC to Mumps:', error);
        res.status(500).json({ success: false, message: 'Internal server error during login.' });
    }
});



process.on('exit', (code) => {
  close('from exit');
});

process.on('SIGINT', () => {
  //close('from SIGINT');
  process.exit(0);
});

process.on('SIGTERM', () => {
  close('from SIGTERM');
  process.exit(0);
});


try {
  let result = await tmg.RPC("NODETEST","TMGNODE1", ['hello', 'world'] );
  console.log('RPC result:', JSON.stringify(result));
} catch (error) {
  console.error('Error during RPC test:', error);
}

// Important: If you want the server to keep running, remove `process.exit(0);`
// from this debug block. It will exit the entire Node.js process immediately
// after the RPC call, preventing your Express server from listening.
// If this is just for a quick test run, it's fine.
//process.exit(0); 


app.listen(PORT);
console.log(`Server listening on port ${PORT}`);





